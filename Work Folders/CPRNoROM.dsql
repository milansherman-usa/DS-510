--prep_query
    DECLARE @EDate DATE = (SELECT MAX(FYWeekEndingDate)
    FROM dbo.DateDimension
    WHERE FYWeekEndingDate < GETDATE())
    DECLARE @BDate DATE = (SELECT MIN(ActualDate)
    FROM dbo.DateDimension
    WHERE FYWeekEndingDate = DATEADD(WEEK, -103, @EDate))
    DECLARE @PriorBDate DATE = DATEADD(WEEK, -52, @BDate)
    
    IF OBJECT_ID('tempdb..#Dates') IS NOT NULL
    DROP TABLE #Dates
    SELECT DISTINCT FYWeekEndingDate,
    DATEADD(DAY, -1, FYWeekEndingDate) AS WeekEndingDate,
    FYYearNumber,
    FYWeekNumber
    INTO #Dates
    FROM dbo.DateDimension
    WHERE ActualDate BETWEEN @PriorBDate AND @EDate
    
    IF OBJECT_ID('tempdb..#NewItemsDates') IS NOT NULL
    DROP TABLE #NewItemsDates
    SELECT DISTINCT FYWeekEndingDate,
    ActualDate,
    FYYearNumber,
    FYWeekNumber
    INTO #NewItemsDates
    FROM dbo.DateDimension
    WHERE ActualDate BETWEEN @PriorBDate AND @EDate
    
    
    
    --Identifying items first sold in last 3 years
    IF OBJECT_ID('tempdb..#NewNonSeasonal') IS NOT NULL
    DROP TABLE #NewNonSeasonal
    SELECT i.StoreItemDimensionID,
    i.NielsenCategory_Key,
    i.NielsenSubcategory_Key,
    i.FirstSoldDate,
    i.LastSoldDate
    INTO #NewNonSeasonal
    FROM dbo.StoreItemDimension i
    JOIN #NewItemsDates d
    ON d.ActualDate = i.FirstSoldDate
    WHERE i.NielsenSubcategory_Key > -1
    AND i.NielsenSubcategory NOT LIKE '% SEASONAL%'
    AND i.NielsenCategory <> 'SEASONAL'
    AND i.Description NOT LIKE '%seasonal%'
    
    --Sales for items first sold within 52 weeks of each week
    IF OBJECT_ID('tempdb..#NewSales') IS NOT NULL
    DROP TABLE #NewSales
    SELECT d.FYWeekEndingDate,
    n.NielsenCategory_Key,
    n.NielsenSubcategory_Key,
    COUNT(DISTINCT n.StoreItemDimensionID) AS NewNonSeasonalItems,
    SUM(sd.SaleAmount) AS NewSales
    INTO #NewSales
    FROM dbo.SalesDailyItemFact sd
    JOIN #NewNonSeasonal n
    ON n.StoreItemDimensionID = sd.StoreItemDimensionID
    JOIN dbo.DateDimension d
    ON d.DateDimensionID = sd.DateDimensionID
    WHERE sd.DateDimensionID BETWEEN CONVERT(INT, CONVERT(CHAR(8), @BDate, 112)) AND CONVERT(INT, CONVERT(CHAR(8), @EDate, 112))
    AND n.FirstSoldDate >= DATEADD(WEEK, -52, d.ActualDate)
    GROUP BY d.FYWeekEndingDate,
    n.NielsenCategory_Key,
    n.NielsenSubcategory_Key--Sales for all non-seasonal items, split into general and non-general
   IF OBJECT_ID('tempdb..#SalesPrep') IS NOT NULL
    DROP TABLE #SalesPrep
    SELECT i.NielsenCategory,
    i.NielsenSubcategory,
    i.NielsenCategory_Key,
    i.NielsenSubcategory_Key,
	f.FactsSegment,
	t.TruPriceSegment,
    d.FYWeekEndingDate,
    d.FYWeekNumber,
    d.FYYearNumber,
    SUM(CASE WHEN dep.POSDepartmentDimensionID = 1
    THEN s.SaleAmount
    END) AS General,
    SUM(CASE WHEN dep.POSDepartmentDimensionID <> 1
    THEN s.SaleAmount
    END) AS NonGeneral,
    COUNT(DISTINCT s.StoreItemDimensionID) AS ItemCt --Item Count is what causes query slowness - remove if we decide we don't need sales per item change points
	INTO #SalesPrep
    FROM dbo.SalesLineItemFact s
    JOIN dbo.DateDimension d
    ON d.DateDimensionID = s.DateDimensionID
    JOIN dbo.LocationDimension l
    ON l.LocationDimensionID = s.LocationDimensionID
    JOIN dbo.POSDepartmentDimension dep
    ON dep.POSDepartmentDimensionID = s.POSDepartmentDimensionID
    JOIN dbo.StoreItemDimension i
    ON i.StoreItemDimensionID = s.StoreItemDimensionID
	JOIN dbo.FactsSegmentDimension f
	ON f.FactsSegmentDimensionID =
		CASE 
		WHEN  s.DateDimensionID > 20170930
		THEN  s.FactsSegmentDimensionID
		ELSE  s.EYC_FactsSegmentDimensionID
		END 
	JOIN dbo.TruPriceSegmentDimension t
	ON t.TruPriceSegmentDimensionID = 
		CASE 
		WHEN  s.DateDimensionID > 20170930
		THEN  s.TruPriceSegmentDimensionID
		ELSE  s.EYC_TruPriceSegmentDimensionID
		END 
    JOIN #Dates da
    ON da.FYWeekEndingDate = d.FYWeekEndingDate
    WHERE l.New_Key = 1
    AND i.Category_Key NOT IN (0, 156, 241, 270, 269, 254, 85)
    AND i.SubCategory_Key NOT IN (1028, 619, 1420, 716, 481, 482, 1712, 566)
    AND i.NielsenCategory_Key > -1
    AND i.NielsenSubcategory NOT LIKE '% SEASONAL%'
    AND i.NielsenCategory <> 'SEASONAL'
    AND i.Description NOT LIKE '%seasonal%'
	AND 1 <> 
		CASE 
		WHEN  s.DateDimensionID > 20170930
		THEN  s.FactsSegmentDimensionID
		ELSE  s.EYC_FactsSegmentDimensionID
		END 
	AND -1 <> 
		CASE 
		WHEN  s.DateDimensionID > 20170930
		THEN  s.TruPriceSegmentDimensionID
		ELSE  s.EYC_TruPriceSegmentDimensionID
		END 
    GROUP BY i.NielsenCategory,
    i.NielsenSubcategory,
    i.NielsenCategory_Key,
    i.NielsenSubcategory_Key,
	f.FactsSegment,
	t.TruPriceSegment,
    d.FYWeekEndingDate,
    d.FYWeekNumber,
    d.FYYearNumber
    HAVING SUM(s.SaleAmount) > 1000
    
    --Keeping only subcategories with majority of sales in general
    IF OBJECT_ID('tempdb..#Sales') IS NOT NULL
    DROP TABLE #Sales;
    SELECT NielsenCategory AS nielsenCategory,
    NielsenSubcategory AS nielsenSubcategory,
    NielsenCategory_Key AS nielsenCategory_Key,
    NielsenSubcategory_Key AS nielsenSubcategory_Key,
    FactsSegment,
	TruPriceSegment,
	FYWeekEndingDate AS week,
    FYWeekNumber AS weekNum,
    FYYearNumber AS yearNum,
    General + NonGeneral AS sales,
    ItemCt
    INTO #Sales
    FROM #SalesPrep
    WHERE General > NonGeneral
    
    --Calculating prior year sales
    IF OBJECT_ID('tempdb..#SalesComp') IS NOT NULL
    DROP TABLE #SalesComp;
    SELECT s1.nielsenCategory,
    s1.nielsenSubcategory,
    s1.nielsenCategory_Key,
    s1.nielsenSubcategory_Key,
	s1.FactsSegment,
	s1.TruPriceSegment,
    s1.week,
    SUM(s1.sales) AS sales,
    SUM(s2.sales) AS PYsales,
    (SUM(s1.sales) - SUM(s2.sales)) / SUM(s2.sales) AS PYchg,
    SUM(s1.ItemCt) AS ItemCt,
    SUM(s2.ItemCt) AS PYItemCt,
    SUM(s1.sales / s1.ItemCt) AS salesPerItem,
    SUM(s2.sales / s2.ItemCt) AS PYsalesPerItem,
    (SUM(s1.sales / s1.ItemCt) - SUM(s2.sales / s2.ItemCt)) / SUM(s2.sales / s2.ItemCt) AS PYchgPerItem
    INTO #SalesComp
    FROM #Sales s1
    JOIN #Sales s2
    ON s2.nielsenSubcategory_Key = s1.nielsenSubcategory_Key
    AND s2.nielsenCategory_Key = s1.nielsenCategory_Key
    AND s2.weekNum = s1.weekNum
    AND s2.yearNum = s1.yearNum - 1
    GROUP BY s1.nielsenCategory,
    s1.nielsenSubcategory,
    s1.nielsenCategory_Key,
    s1.nielsenSubcategory_Key,
	s1.FactsSegment,
	s1.TruPriceSegment,
    s1.week
    
    --final_query
    --Joining total sales, ROM sales, new item sales
    SELECT s.nielsenCategory,
    s.nielsenCategory_Key,
    s.nielsenSubcategory,
    s.nielsenSubcategory_Key,
    s.nielsenCategory + '-' + s.nielsenSubcategory AS nielsenCatSubcat,
    s.nielsenCategory + '-' + s.nielsenSubcategory + '-' + s.FactsSegment + '-' + s.TruPriceSegment AS nielsenCatSubcatSegment,
	s.FactsSegment,
	s.TruPriceSegment,
	s.week,
    s.sales,
    s.PYsales,
    s.PYchg,
    s.ItemCt,
    s.PYItemCt,
    s.salesPerItem,
    s.PYsalesPerItem,
    s.PYchgPerItem,
    ISNULL(n.NewSales, 0) AS NewSales,
    ISNULL(n.NewSales, 0) / s.sales AS NewPctOfSales,
    ISNULL(n.NewNonSeasonalItems, 0) AS NewNonSeasonalItems,
    ISNULL(n.NewSales / NULLIF(ISNULL(n.NewNonSeasonalItems, 0), 0), 0) AS NewSalesPerItem
    FROM #SalesComp s
    LEFT JOIN #NewSales n
    ON n.NielsenCategory_Key = s.nielsenCategory_Key
    AND n.NielsenSubcategory_Key = s.nielsenSubcategory_Key
    AND n.FYWeekEndingDate = s.week